# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and Deploy to Azure VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Clona el código del repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Instala Java 17 (Temurin)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Compila el proyecto con Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Rename JAR to app.jar
        run: |
          JAR_FILE=$(find target -name "*.jar" | head -n 1)
          cp "$JAR_FILE" app.jar

      # 4. Sube archivos al servidor remoto (incluyendo el .jar generado)
      - name: Copy files to Azure VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USER }}
          key: ${{ secrets.AZURE_KEY }}
          source: |
            docker-compose.yml
            Dockerfile
            app.jar
            application.yml
          target: /home/${{ secrets.AZURE_USER }}/app

      # 5. Conéctate por SSH y ejecuta docker-compose
      - name: SSH into Azure VM and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.AZURE_HOST }}
          username: ${{ secrets.AZURE_USER }}
          key: ${{ secrets.AZURE_KEY }}
          script: |
            cd /home/${{ secrets.AZURE_USER }}/app
            docker-compose down
            docker-compose up -d --build
